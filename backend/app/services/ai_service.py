"""
Servicio de IA para procesamiento de lenguaje natural con Claude/GPT.
Maneja la personalidad de Loki y extrae informaci√≥n contextual de las conversaciones.
"""

from typing import Dict, Any, Optional, List
import json
import os
from datetime import datetime
from anthropic import Anthropic

from app.core.config import settings


class LokiAIService:
    """
    Servicio principal de IA para Loki.
    Gestiona la personalidad del bot y el procesamiento de mensajes.
    """
    
    def __init__(self):
        self.anthropic_key = settings.ANTHROPIC_API_KEY
        self.openai_key = settings.OPENAI_API_KEY
        
        # Debug: Verificar que se carg√≥ la key
        print(f"üîç Anthropic API Key presente: {bool(self.anthropic_key)}")
        if self.anthropic_key:
            print(f"üîç Key empieza con: {self.anthropic_key[:15]}...")
        
        # Inicializar cliente de Claude si tenemos la API key
        if self.anthropic_key:
            try:
                self.claude_client = Anthropic(api_key=self.anthropic_key)
                print("‚úÖ Claude API inicializada correctamente")
            except Exception as e:
                self.claude_client = None
                print(f"‚ùå Error al inicializar Claude: {e}")
        else:
            self.claude_client = None
            print("‚ö†Ô∏è Claude API key no encontrada, usando respuestas basadas en reglas")
        
    def build_system_prompt(self, usuario_nombre: str, contexto_reciente: List[Dict] = None) -> str:
        """
        Construye el prompt del sistema con la personalidad h√≠brida de Loki.
        Combina: Mental Health Assistant + Psychologist + Tracking inteligente.
        """
        prompt = f"""Eres Loki, un asistente de bienestar emocional con la calidez de un amigo cercano 
y la profundidad de un psic√≥logo experimentado. Tu especialidad es acompa√±ar a {usuario_nombre} en su 
camino hacia el autoconocimiento emocional y el cultivo de h√°bitos saludables.

## TU ESENCIA

**Empat√≠a Profunda**: Conect√°s genuinamente con las emociones del usuario. No juzg√°s, valid√°s cada 
experiencia como √∫nica. Cuando alguien comparte algo, reflej√°s su sentimiento para que se sienta 
verdaderamente escuchado.

**Escucha Activa**: Prest√°s atenci√≥n a lo que dicen Y a lo que no dicen. Reconoc√©s patrones entre 
emociones y h√°bitos, pero sin sonar mec√°nico o anal√≠tico.

**Gu√≠a No Directiva**: No d√°s soluciones prefabricadas. Ayud√°s a la persona a descubrir sus propias 
respuestas a trav√©s de preguntas reflexivas que invitan a la introspecci√≥n.

**Lenguaje Humano**: Habl√°s como un ser real, c√°lido, sin tecnicismos. Tu tono es conversacional 
pero profesional. Pens√°s en espa√±ol, no traduc√≠s del ingl√©s.

## TU ESTRUCTURA CONVERSACIONAL

En cada interacci√≥n segu√≠s esta danza natural:

1. **Conexi√≥n**: Recib√≠s con calidez, invitando a compartir c√≥mo se siente.

2. **Reconocimiento**: Cuando comparten una emoci√≥n, la reflej√°s y valid√°s.
   Ej: "Entiendo que te sientas as√≠, es totalmente v√°lido cuando..."

3. **Exploraci√≥n**: Hac√©s preguntas abiertas que profundizan:
   - "¬øQu√© cre√©s que est√° detr√°s de ese sentimiento?"
   - "¬øC√≥mo se manifiesta eso en tu d√≠a a d√≠a?"
   - "¬øNot√°s alg√∫n patr√≥n?"

4. **Insight**: Ayud√°s a conectar puntos entre emociones, pensamientos y h√°bitos.

5. **Empoderamiento**: Reforz√°s su capacidad de crecimiento y resiliencia.

## TUS CAPACIDADES (TRACKING NATURAL)

Mientras convers√°s naturalmente, prest√°s atenci√≥n sutil a:

- **Estados de √Ånimo**: Cuando mencionan n√∫meros del 1-10, explor√°s qu√© significa ese n√∫mero HOY.
  No lo trat√°s mec√°nicamente: "Un 8 suena muy bien. ¬øQu√© hizo que hoy sea un 8 para vos?"

- **H√°bitos**: Cuando hablan de ejercicio, sue√±o, comida, socializaci√≥n, trabajo, etc., 
  reconoc√©s estos patrones y explor√°s su relaci√≥n con el bienestar.

- **Desencadenantes**: Identific√°s situaciones, personas o eventos que afectan su √°nimo,
  sin ser invasivo.

## EJEMPLOS DE TU ESTILO

**Frustraci√≥n:**
"Escucho mucha frustraci√≥n en lo que me cont√°s. Es agotador cuando las cosas no avanzan como esperabas. 
¬øQu√© es lo que m√°s te est√° pesando ahora?"

**Buen √°nimo:**
"¬°Qu√© bueno escuchar que te sent√≠s tan bien! Un 8 de 10 es genial. ¬øQu√© cre√©s que contribuy√≥ a 
sentirte as√≠? A veces entender qu√© funciona nos ayuda a repetirlo."

**Incertidumbre:**
"Siento que hay algo que quer√©s expresar pero todav√≠a est√°s buscando las palabras. No hay apuro. 
¬øHay algo que te est√© rondando?"

## TUS L√çMITES

- No diagnostic√°s. Si detect√°s se√±ales graves, suger√≠s buscar ayuda profesional con tacto.
- Si mencionan crisis/autolesiones/suicidio: Expres√°s preocupaci√≥n genuina y recomend√°s 
  l√≠neas de ayuda inmediatamente.
- Respet√°s la confidencialidad de cada conversaci√≥n.

## ESTILO DE RESPUESTA

- Respuestas conversacionales: 2-4 oraciones naturales
- Preguntas abiertas que inviten a reflexionar
- Valid√°s emociones antes de preguntar
- Adapt√°s tu tono al estado emocional actual

Tu misi√≥n: No "arreglar" a nadie, sino acompa√±ar, validar y facilitar el autodescubrimiento. 
Sos un espejo emp√°tico que ayuda a {usuario_nombre} a verse con m√°s claridad y compasi√≥n."""

        if contexto_reciente:
            prompt += f"\n\nCONTEXTO RECIENTE:\n"
            for conv in contexto_reciente[-5:]:  # √öltimas 5 conversaciones
                prompt += f"Usuario: {conv.get('mensaje_usuario', '')}\n"
                prompt += f"T√∫: {conv.get('respuesta_loki', '')}\n"
        
        return prompt
    
    def extract_mood_level(self, mensaje: str) -> Optional[int]:
        """
        Extrae el nivel de √°nimo del mensaje si est√° presente.
        Busca patrones como "8/10", "nivel 7", "me siento 6", "un 8 de 10", etc.
        """
        import re
        
        # Patrones comunes para extraer nivel de √°nimo (ordenados por especificidad)
        patterns = [
            r'(?:un|una)\s+(\d+)\s+de\s+10',  # "un 8 de 10", "una 7 de 10"
            r'(\d+)\s+de\s+10',                # "8 de 10", "7 de 10"
            r'(\d+)/10',                       # "8/10", "7/10"
            r'nivel\s+(\d+)',                  # "nivel 8", "nivel 7"
            r'me\s+siento\s+(?:un\s+)?(\d+)',  # "me siento 8", "me siento un 8"
            r'estoy\s+(?:en\s+)?(?:un\s+)?(\d+)', # "estoy 8", "estoy en 8", "estoy un 8"
            r'(?:como\s+)?(\d+)\s+(?:de\s+)?(?:10)?(?:\s+hoy)?', # "como 8", "8 hoy"
            r'^(\d+)$',                        # Solo un n√∫mero
        ]
        
        for pattern in patterns:
            match = re.search(pattern, mensaje.lower())
            if match:
                nivel = int(match.group(1))
                if 1 <= nivel <= 10:
                    return nivel
        
        return None
    
    def extract_habits_mentioned(self, mensaje: str) -> List[str]:
        """
        Extrae h√°bitos mencionados en el mensaje usando NLP b√°sico.
        """
        habitos_detectados = []
        mensaje_lower = mensaje.lower()
        
        # Diccionario de palabras clave por categor√≠a de h√°bito
        habitos_keywords = {
            'ejercicio': ['ejercicio', 'gym', 'gimnasio', 'correr', 'corri', 'entrenar', 'entren√©', 'deporte', 'caminar', 'camin√©', 'yoga'],
            'sue√±o': ['dormir', 'dorm√≠', 'dormi', 'sue√±o', 'descansar', 'descans√©', 'descanso', 'siesta'],
            'social': ['amigos', 'salir', 'sal√≠', 'sali', 'reuni√≥n', 'reunion', 'familia', 'pareja', 'cita'],
            'trabajo': ['trabajo', 'trabaj√©', 'trabajar', 'oficina', 'reuni√≥n de trabajo', 'proyecto', 'deadline'],
            'meditaci√≥n': ['meditar', 'medit√©', 'meditaci√≥n', 'mindfulness', 'respirar'],
            'lectura': ['leer', 'le√≠', 'lei', 'libro', 'lectura'],
            'alimentaci√≥n': ['comer', 'com√≠', 'comida', 'desayuno', 'almuerzo', 'cena', 'cocinar', 'cocin√©'],
        }
        
        for habito, keywords in habitos_keywords.items():
            for keyword in keywords:
                if keyword in mensaje_lower:
                    habitos_detectados.append(habito)
                    break  # Solo agregamos cada h√°bito una vez
        
        return habitos_detectados
    
    def extract_emotional_triggers(self, mensaje: str) -> List[str]:
        """
        Identifica posibles disparadores emocionales mencionados.
        """
        triggers = []
        mensaje_lower = mensaje.lower()
        
        # Disparadores comunes
        trigger_keywords = {
            'estr√©s': ['estr√©s', 'estres', 'estresado', 'estresada', 'presi√≥n', 'agobiado', 'agobiada'],
            'ansiedad': ['ansiedad', 'ansioso', 'ansiosa', 'nervioso', 'nerviosa', 'preocupado', 'preocupada'],
            'cansancio': ['cansado', 'cansada', 'agotado', 'agotada', 'exhausto', 'exhausta', 'fatigado'],
            'conflicto': ['pelea', 'discusi√≥n', 'discusion', 'conflicto', 'problema', 'desacuerdo'],
            'soledad': ['solo', 'sola', 'soledad', 'aislado', 'aislada'],
            'alegr√≠a': ['feliz', 'alegre', 'contento', 'contenta', 'emocionado', 'emocionada'],
        }
        
        for trigger, keywords in trigger_keywords.items():
            for keyword in keywords:
                if keyword in mensaje_lower:
                    triggers.append(trigger)
                    break
        
        return triggers
    
    def analyze_message_context(self, mensaje: str) -> Dict[str, Any]:
        """
        An√°lisis completo del mensaje para extraer toda la informaci√≥n relevante.
        """
        context = {
            'mood_level': self.extract_mood_level(mensaje),
            'habits_mentioned': self.extract_habits_mentioned(mensaje),
            'emotional_triggers': self.extract_emotional_triggers(mensaje),
            'timestamp': datetime.utcnow().isoformat(),
        }
        
        return context
    
    async def generate_response(
        self, 
        mensaje_usuario: str, 
        usuario_nombre: str,
        contexto_reciente: List[Dict] = None,
        user_context: Dict = None,
        db_session = None,  # Nueva: sesi√≥n de BD para an√°lisis de patrones
        usuario_id: int = None  # Nueva: ID del usuario para an√°lisis
    ) -> Dict[str, Any]:
        """
        Genera una respuesta de Loki basada en el mensaje del usuario.
        Ahora incluye an√°lisis de patrones personales cuando es relevante.
        
        Returns:
            Dict con 'respuesta', 'context_extracted', 'pattern_insights' y otros metadatos
        """
        # Analizar el contexto del mensaje
        extracted_context = self.analyze_message_context(mensaje_usuario)
        
        # Obtener insights de patrones personales si hay BD disponible
        pattern_insight = ""
        if db_session and usuario_id:
            try:
                from app.services.pattern_analysis import pattern_service
                pattern_insight = pattern_service.get_relevant_insights_for_conversation(
                    db_session, 
                    usuario_id,
                    current_mood=extracted_context.get('mood_level')
                )
            except Exception as e:
                print(f"‚ö†Ô∏è Error obteniendo insights de patrones: {e}")
        
        # Intentar generar respuesta con Claude
        if self.claude_client:
            try:
                print(f"ü§ñ Generando respuesta con Claude para: '{mensaje_usuario[:50]}...'")
                respuesta = await self._generate_claude_response(
                    mensaje_usuario,
                    usuario_nombre,
                    contexto_reciente,
                    extracted_context,
                    pattern_insight  # Pasar el insight al modelo
                )
                print(f"‚úÖ Respuesta de Claude generada exitosamente")
            except Exception as e:
                print(f"‚ö†Ô∏è Error con Claude API: {e}")
                print(f"‚ö†Ô∏è Tipo de error: {type(e).__name__}")
                print("‚ö†Ô∏è Fallback a respuestas basadas en reglas")
                respuesta = self._generate_rule_based_response(
                    mensaje_usuario, 
                    usuario_nombre,
                    extracted_context
                )
        else:
            # Fallback a respuestas basadas en reglas
            print("‚ÑπÔ∏è Usando respuestas basadas en reglas (sin Claude API)")
            respuesta = self._generate_rule_based_response(
                mensaje_usuario, 
                usuario_nombre,
                extracted_context
            )
        
        return {
            'respuesta': respuesta,
            'context_extracted': extracted_context,
            'pattern_insight_used': pattern_insight,
            'needs_followup': self._needs_followup(extracted_context),
        }
    
    async def _generate_claude_response(
        self,
        mensaje_usuario: str,
        usuario_nombre: str,
        contexto_reciente: List[Dict] = None,
        extracted_context: Dict = None,
        pattern_insight: str = ""  # Nuevo par√°metro
    ) -> str:
        """
        Genera respuesta usando Claude API.
        Ahora incluye insights de patrones personales cuando est√°n disponibles.
        """
        # Construir el system prompt
        system_prompt = self.build_system_prompt(usuario_nombre, contexto_reciente)
        
        # Agregar informaci√≥n del contexto extra√≠do al prompt
        context_info = ""
        if extracted_context:
            if extracted_context.get('mood_level'):
                context_info += f"\n[INFO: Usuario mencion√≥ nivel de √°nimo {extracted_context['mood_level']}/10]"
            if extracted_context.get('habits_mentioned'):
                context_info += f"\n[INFO: H√°bitos detectados: {', '.join(extracted_context['habits_mentioned'])}]"
            if extracted_context.get('emotional_triggers'):
                context_info += f"\n[INFO: Disparadores emocionales: {', '.join(extracted_context['emotional_triggers'])}]"
        
        # Agregar insight de patrones si est√° disponible
        if pattern_insight:
            context_info += f"\n\n[INSIGHT PERSONALIZADO DISPONIBLE]\n{pattern_insight}\n"
            context_info += "[INSTRUCCI√ìN: Incorpor√° este insight de forma NATURAL y CONVERSACIONAL en tu respuesta si es relevante. "
            context_info += "No lo cites textualmente, sino usalo como base para hacer una sugerencia emp√°tica.]"
        
        # Construir mensajes para la conversaci√≥n
        messages = []
        
        # Agregar contexto reciente si existe
        if contexto_reciente:
            for conv in contexto_reciente[-3:]:  # √öltimas 3 conversaciones
                messages.append({
                    "role": "user",
                    "content": conv.get('mensaje_usuario', '')
                })
                messages.append({
                    "role": "assistant",
                    "content": conv.get('respuesta_loki', '')
                })
        
        # Agregar el mensaje actual
        mensaje_completo = mensaje_usuario
        if context_info:
            mensaje_completo += context_info
            
        messages.append({
            "role": "user",
            "content": mensaje_completo
        })
        
        # Llamar a Claude API
        # Usando Claude 3 Haiku (m√°s r√°pido y econ√≥mico, deber√≠a estar disponible)
        response = self.claude_client.messages.create(
            model="claude-3-haiku-20240307",
            max_tokens=300,  # Respuestas cortas y concisas
            temperature=0.8,  # Un poco de creatividad pero consistente
            system=system_prompt,
            messages=messages
        )
        
        # Extraer la respuesta
        respuesta = response.content[0].text
        
        return respuesta
    
    def _generate_rule_based_response(
        self, 
        mensaje: str, 
        nombre: str, 
        context: Dict
    ) -> str:
        """
        Genera respuestas basadas en reglas mientras no tengamos la API configurada.
        """
        # Si detectamos un nivel de √°nimo
        if context['mood_level']:
            nivel = context['mood_level']
            if nivel >= 8:
                return f"¬°Qu√© bueno escuchar eso, {nombre}! ¬øQu√© crees que hizo que te sintieras as√≠ de bien hoy?"
            elif nivel >= 6:
                return f"Un {nivel}/10 est√° bastante bien, {nombre}. ¬øAlgo en particular que influy√≥ en c√≥mo te sientes?"
            elif nivel >= 4:
                return f"Veo que est√°s en un {nivel}/10. ¬øHay algo espec√≠fico que est√© afectando tu √°nimo hoy?"
            else:
                return f"Lamento que est√©s pasando por un momento dif√≠cil, {nombre}. ¬øQuieres contarme qu√© est√° pasando?"
        
        # Si mencion√≥ h√°bitos
        if context['habits_mentioned']:
            habitos = ', '.join(context['habits_mentioned'])
            return f"Genial que hayas hecho {habitos} hoy. ¬øC√≥mo te sientes despu√©s de eso?"
        
        # Si hay disparadores emocionales
        if context['emotional_triggers']:
            trigger = context['emotional_triggers'][0]
            if trigger in ['estr√©s', 'ansiedad']:
                return f"Entiendo que est√©s sintiendo {trigger}. ¬øEsto es algo que viene de hace rato o surgi√≥ hoy?"
            elif trigger == 'alegr√≠a':
                return f"¬°Me encanta tu energ√≠a! ¬øQu√© te tiene tan bien hoy?"
        
        # Respuesta gen√©rica emp√°tica
        mensajes_genericos = [
            f"Cu√©ntame m√°s, {nombre}. ¬øC√≥mo ha estado tu d√≠a?",
            f"Gracias por compartir eso, {nombre}. ¬øC√≥mo te sientes en este momento del 1 al 10?",
            f"Interesante, {nombre}. ¬øHay algo m√°s que quieras compartir sobre c√≥mo te sientes?",
        ]
        
        import random
        return random.choice(mensajes_genericos)
    
    def _needs_followup(self, context: Dict) -> bool:
        """
        Determina si Loki deber√≠a hacer una pregunta de seguimiento.
        """
        # Si detectamos un nivel muy bajo de √°nimo
        if context['mood_level'] and context['mood_level'] < 4:
            return True
        
        # Si hay disparadores sin contexto adicional
        if context['emotional_triggers'] and not context['habits_mentioned']:
            return True
        
        return False


# Instancia singleton del servicio
loki_service = LokiAIService()
